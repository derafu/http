<?php

declare(strict_types=1);

/**
* Derafu: HTTP - Standard-Compliant HTTP Library with Extended Features.
*
* Copyright (c) 2025 Esteban De La Fuente Rubio / Derafu <https://www.derafu.dev>
* Licensed under the MIT License.
* See LICENSE file for more details.
*/

namespace Derafu\Http\Contract;

use Derafu\Http\Enum\HttpStatus;
use JsonSerializable;
use Stringable;

/**
 * Represents an application error using as a base RFC 7807.
 *
 * Provides access to all error information including:
 *
 *   - HTTP status and basic error details.
 *   - Exception information and stack trace.
 *   - Request context.
 *   - Environment information.
 *
 * This interface ensures error information is consistently available across
 * different error rendering formats (JSON, HTML, plain text).
 *
 * @see https://www.rfc-editor.org/rfc/rfc7807.html
 */
interface ProblemDetailInterface extends Stringable, JsonSerializable
{
    /**
     * A URI reference [RFC3986] that identifies the problem type.
     *
     * @return string
     */
    public function getType(): string;

    /**
     * A short, human-readable summary of the problem type.
     *
     * @return string
     */
    public function getTitle(): string;

    /**
     * The HTTP status code ([RFC7231], Section 6) generated by the origin
     * server for this occurrence of the problem.
     *
     * @return integer
     */
    public function getStatus(): int;

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     *
     * @return string
     */
    public function getDetail(): string;

    /**
     * A URI reference that identifies the specific occurrence of the problem.
     *
     * @return string|null
     */
    public function getInstance(): ?string;

    /**
     * Gets the HTTP status for this error.
     *
     * @return HttpStatus
     */
    public function getHttpStatus(): HttpStatus;

    /**
     * Gets the original request.
     *
     * @return RequestInterface|null
     */
    public function getRequest(): ?RequestInterface;

    /**
     * Get a safe instance of the throwable error.
     *
     * @return SafeThrowableInterface
     */
    public function getThrowable(): SafeThrowableInterface;

    /**
     * Get the context of the problem.
     *
     * @return array
     */
    public function getContext(): array;

    /**
     * Gets when the error occurred.
     *
     * @return string
     */
    public function getTimestamp(): string;

    /**
     * Gets the application environment.
     *
     * @return string
     */
    public function getEnvironment(): string;

    /**
     * Checks if debug mode is enabled.
     *
     * @return bool
     */
    public function isDebug(): bool;
}
