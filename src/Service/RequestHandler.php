<?php

declare(strict_types=1);

/**
 * Derafu: HTTP - Standard-Compliant HTTP Library with Extended Features.
 *
 * Copyright (c) 2025 Esteban De La Fuente Rubio / Derafu <https://www.derafu.org>
 * Licensed under the MIT License.
 * See LICENSE file for more details.
 */

namespace Derafu\Http\Service;

use Derafu\Http\Contract\ProblemFactoryInterface;
use Derafu\Http\Contract\ProblemHandlerInterface;
use Derafu\Http\Contract\RequestInterface;
use LogicException;
use Psr\Http\Message\ResponseInterface as PsrResponseInterface;
use Psr\Http\Message\ServerRequestInterface as PsrRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;
use Throwable;

/**
 * Manages a stack of PSR-15 middlewares.
 *
 * This class is responsible for:
 *
 *   - Maintaining the middleware queue.
 *   - Processing middlewares in order.
 *   - Generating a error when no middlewares remain.
 */
class RequestHandler implements RequestHandlerInterface
{
    /**
     * @var MiddlewareInterface[]
     */
    private array $middlewares = [];

    /**
     * Current position in middleware stack.
     *
     * @var int
     */
    private int $currentIndex = 0;

    /**
     * Creates a new middleware stack.
     *
     * @param ProblemFactoryInterface $problemFactory
     * @param ProblemHandlerInterface $problemHandler
     * @param MiddlewareInterface ...$middlewares Optional initial middleware
     * stack.
     */
    public function __construct(
        private readonly ProblemFactoryInterface $problemFactory,
        private readonly ProblemHandlerInterface $problemHandler,
        MiddlewareInterface ...$middlewares
    ) {
        $this->middlewares = $middlewares;
    }

    /**
     * {@inheritDoc}
     */
    public function handle(PsrRequestInterface $request): PsrResponseInterface
    {
        try {
            // If there are no more middlewares, use the fallback handler.
            if ($this->currentIndex === count($this->middlewares)) {
                throw new LogicException(
                    'No response was generated by the middleware chain.'
                );
            }

            // Get next middleware and increment position.
            $middleware = $this->middlewares[$this->currentIndex];
            $this->currentIndex++;

            // Process the middleware.
            return $middleware->process($request, $this);
        } catch (Throwable $e) {
            assert($request instanceof RequestInterface);
            $problem = $this->problemFactory->create($e, $request);
            return $this->problemHandler->handle($problem);
        }
    }
}
